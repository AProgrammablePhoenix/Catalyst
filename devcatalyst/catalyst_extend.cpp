#include <iostream>
#include <algorithm>
#include <random>
#include <vector>
#include <cstdint>

#include "../catalyst.hpp"

// randomly generated bytes do not have any real meaning at all
// mt1993 is used here to make the example of the implementation easier to understand
// using a cryptographically secure PRNG is preferred though
std::vector<uint8_t> catalyst::Extend::generate(uint64_t cipher_length, uint64_t key_length) {
    const size_t max_extension = cipher_length ^ (key_length & cipher_length);

    std::random_device rd;
    std::mt19937 g{rd()};

    const uint32_t random_n = g();
    const uint8_t extension_size = max_extension > 1 ? random_n % max_extension : max_extension + 2;

    std::vector<uint8_t> extension(extension_size + 1, 0);
    extension[extension_size] = extension_size;

    g = std::mt19937{rd()};
    for (size_t i = 0; i < extension_size; ++i) {
        extension[i] = (uint8_t)g();
    }

    return extension;
}